name: Nmap Security Scan

on:
  workflow_call:

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: docker compose -f docker-compose.yml up -d --build

      - name: Wait for app to be ready
        run: |
          echo "Waiting for app to start..."
          for i in {1..15}; do
            if curl -s http://localhost:8080 >/dev/null; then
              echo "App is up!"
              exit 0
            fi
            echo "Still waiting..."
            sleep 5
          done
          echo "App did not start in time" >&2
          docker compose logs
          exit 1

      - name: Run comprehensive Nmap security scan
        run: |
            # Create a directory for nmap results
            mkdir -p nmap-results
            
            # Run nmap with volume mounting
            docker run --network=host \
            -v $(pwd)/nmap-results:/results \
            instrumentisto/nmap \
            -sS -sV -sC -O -T4 -v -p- \
            -oX /results/nmap-full-scan.xml \
            -oN /results/nmap-full-scan.txt \
            localhost

      - name: Run targeted vulnerability scans
        run: |
            # Web vulnerability scan
            docker run --network=host \
            -v $(pwd)/nmap-results:/results \
            instrumentisto/nmap \
            --script vulners,http-enum,http-security-headers \
            -p 8080,8081 \
            -oX /results/nmap-web-scan.xml \
            -oN /results/nmap-web-scan.txt \
            localhost

            docker run --network=host \
            -v $(pwd)/nmap-results:/results \
            instrumentisto/nmap \
            --script pgsql-brute \  
            -p 5432 \
            -oX /results/nmap-pgsql-scan.xml \
            -oN /results/nmap-pgsql-scan.txt \
            localhost

            docker run --network=host \
            -v $(pwd)/nmap-results:/results \
            instrumentisto/nmap \
            --script redis-info \  # Αυτό είναι το σωστό όνομα
            -p 6379 \
            -oX /results/nmap-redis-scan.xml \
            -oN /results/nmap-redis-scan.txt \
            localhost

      - name: Verify scan files were created
        run: |
          echo "=== Checking for scan files ==="
          ls -la nmap-results/
          
          # Copy files to root for easier access
          cp nmap-results/* .
          
          echo "✅ All scan files:"
          ls -la *.xml *.txt

      - name: Generate comprehensive HTML reports
        run: |
          sudo apt-get install -y xsltproc pandoc curl

          # Generate reports for each scan
          curl -s https://svn.nmap.org/nmap/docs/nmap.xsl -o nmap.xsl
          
          xsltproc -o nmap-full-report.html nmap.xsl nmap-full-scan.xml
          xsltproc -o nmap-vulners-report.html nmap.xsl nmap-vulners.xml
          xsltproc -o nmap-web-vuln-report.html nmap.xsl nmap-web-vuln.xml
          xsltproc -o nmap-pgsql-report.html nmap.xsl nmap-pgsql-scan.xml
          xsltproc -o nmap-redis-report.html nmap.xsl nmap-redis-scan.xml

          # Create comprehensive summary
          cat > security-summary.md << EOF
            # 🛡️ Comprehensive Security Scan Report

            ## 📅 Scan Date: $(date)
            ## 🎯 Target: localhost

            ## 📊 Scan Overview
            - **Full Port Scan**: Completed
            - **Vulnerability Scan**: Completed  
            - **Web Application Scan**: Completed
            - **PostgreSQL Scan**: Completed
            - **Redis Scan**: Completed

            ## 🚪 Open Ports Summary
            \`\`\`bash
            $(grep "open" nmap-full-scan.txt | sort -n)
            \`\`\`

            ## ⚠️ Vulnerability Findings
            \`\`\`bash
            $(grep -i "vuln\|CVE\|warning" nmap-vulners.txt | head -20 || echo "No critical vulnerabilities found")
            \`\`\`

            ## 🗄️ Database Security
            **PostgreSQL (5432):**
            \`\`\`bash
            $(grep -A5 -B5 "5432" nmap-pgsql-scan.txt || echo "No PostgreSQL vulnerabilities detected")
            \`\`\`

            **Redis (6379):**
            \`\`\`bash  
            $(grep -A5 -B5 "6379" nmap-redis-scan.txt || echo "No Redis vulnerabilities detected")
            \`\`\`

            ## 🌐 Web Application Security
            \`\`\`bash
            $(grep -A3 -B3 "http\|ssl" nmap-web-vuln.txt | head -15 || echo "No web vulnerabilities detected")
            \`\`\`

            ## 📈 Statistics
            - **Total Open Ports**: $(grep -c "open" nmap-full-scan.txt)
            - **Vulnerability Alerts**: $(grep -c "VULNERABLE\|CVE" nmap-vulners.txt 2>/dev/null || echo "0")
            - **Services Scanned**: 5+ specialized scans

            > 🔍 Generated by GitHub Actions Security Pipeline
          EOF

          pandoc security-summary.md -o security-summary.html --self-contained --css=https://cdn.jsdelivr.net/npm/water.css@2/out/water.css

      - name: Upload comprehensive reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports-$(date +%Y%m%d-%H%M%S)
          path: |
            nmap-*.xml
            nmap-*.txt
            *-report.html
            security-summary.*
            nmap-results/

      - name: Display security summary
        run: |
          echo "🔒 SECURITY SCAN COMPLETED 🔒"
          echo "=============================="
          echo "📊 Open ports found:"
          grep "open" nmap-full-scan.txt | sort -n
          echo ""
          echo "⚠️  Vulnerability alerts:"
          grep -i "vuln\|CVE" nmap-vulners.txt 2>/dev/null | head -10 || echo "No critical vulnerabilities detected"
          echo ""
          echo "📁 Full reports available as artifacts"

      - name: Stop services
        run: docker compose -f docker-compose.yml down
