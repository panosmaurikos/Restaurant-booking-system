name: DevSecOps - SonarQube

on:
  workflow_call:
    secrets:
      SONAR_TOKEN:
        required: false  

permissions:
  contents: read
  security-events: write

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Start SonarQube in Docker and create CI token
        run: |
          docker run -d --name sonarqube \
            -p 9000:9000 \
            sonarqube:lts-community
          echo "Waiting for SonarQube to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:9000/api/system/status | grep -q '"UP"'; then
              echo "SonarQube is UP!"
              break
            fi
            echo "Waiting..."
            sleep 10
          done

          echo "Generating Sonar token via API..."
          resp=$(curl -s -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate" -d "name=ci-token")
          SONAR_CI_TOKEN=$(echo "$resp" | sed -n 's/.*"token":"\([^"]*\)".*/\1/p')
          if [ -z "$SONAR_CI_TOKEN" ]; then
            echo " Failed to create Sonar token"
            exit 1
          fi
          echo "SONAR_CI_TOKEN=$SONAR_CI_TOKEN" >> $GITHUB_ENV

      - name: Run SonarQube scan
        env:
          SONAR_HOST_URL: http://localhost:9000
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd RestaurantBookSystem
          TOKEN="${SONAR_CI_TOKEN:-$SONAR_TOKEN}"
          mvn -B -DskipTests verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=restaurant-backend \
            -Dsonar.projectName="Restaurant Backend" \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login="$TOKEN"
          # Copy SonarQube reports to workflow root for later steps
          cp sonar-issues.json ../ || true
          cp sonar-measures.json ../ || true
          cp sonar-project.json ../ || true
          cd ..

      - name: Print Sonar JSON reports to job log
        run: |
          echo "=== SONAR ISSUES ==="
          jq --color-output '.' sonar-issues.json || echo "no sonar-issues.json"
          echo
          echo "=== SONAR MEASURES ==="
          jq --color-output '.' sonar-measures.json || echo "no sonar-measures.json"
          echo
          echo "=== SONAR PROJECT ==="
          jq --color-output '.' sonar-project.json || echo "no sonar-project.json"

      - name: Generate human-readable Markdown summary
        run: |
          PROJECT_KEY="restaurant-backend"
          echo "# SonarQube Report â€” ${PROJECT_KEY}" > sonar-summary.md
          echo "" >> sonar-summary.md
          echo "Generated: $(date)" >> sonar-summary.md
          echo "" >> sonar-summary.md
          echo "## Key Measures" >> sonar-summary.md
          if [ -f sonar-measures.json ]; then
            jq -r '.component.measures[] | "- **\(.metric)**: \(.value)"' sonar-measures.json >> sonar-summary.md || true
          else
            echo "_No measures file found_" >> sonar-summary.md
          fi
          echo "" >> sonar-summary.md
          echo "## Issues by severity" >> sonar-summary.md
          if [ -f sonar-issues.json ]; then
            jq -r '.issues[]?.severity' sonar-issues.json 2>/dev/null | sort | uniq -c | awk '{print "- "$2": "$1}' >> sonar-summary.md || echo "- none" >> sonar-summary.md
          else
            echo "_No issues file found_" >> sonar-summary.md
          fi
          echo "" >> sonar-summary.md
          echo "## Top issues (first 10)" >> sonar-summary.md
          if [ -f sonar-issues.json ]; then
            jq -r '.issues[] | "- **" + (.severity // "-") + "**: " + (.message // "") + " _(file: " + (.component // "n/a") + ")_"' sonar-issues.json | head -n 10 >> sonar-summary.md || true
          fi

      - name: Convert Markdown summary to HTML
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pandoc
          if [ -f sonar-summary.md ]; then
            pandoc sonar-summary.md -o sonar-summary.html || true
          fi

      - name: Upload Sonar results and summary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report
          path: |
            sonar-issues.json
            sonar-measures.json
            sonar-project.json
            sonar-summary.md
            sonar-summary.html

      - name: Fail if issues found
        run: |
          if [ -f sonar-issues.json ]; then
            issues=$(jq '.issues | length' sonar-issues.json || echo 0)
            if [ "$issues" -gt 0 ]; then
              echo " Found $issues SonarQube issues - failing workflow"
              exit 1
            else
              echo " No SonarQube issues found"
            fi
          else
            echo " sonar-issues.json not found - scan failed"
            exit 1
          fi