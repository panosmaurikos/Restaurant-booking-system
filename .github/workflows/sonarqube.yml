name: DevSecOps - SonarQube

on:
  workflow_call:
    secrets:
      SONAR_TOKEN:
        required: false  

permissions:
  contents: read
  security-events: write

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Start SonarQube in Docker and create CI token
        run: |
          docker run -d --name sonarqube \
            -p 9000:9000 \
            sonarqube:lts-community
          echo "Waiting for SonarQube to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:9000/api/system/status | grep -q '"UP"'; then
              echo "SonarQube is UP!"
              break
            fi
            echo "Waiting..."
            sleep 10
          done

          echo "Generating Sonar token via API..."
          resp=$(curl -s -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate" -d "name=ci-token")
          SONAR_CI_TOKEN=$(echo "$resp" | sed -n 's/.*"token":"\([^"]*\)".*/\1/p')
          if [ -z "$SONAR_CI_TOKEN" ]; then
            echo " Failed to create Sonar token"
            exit 1
          fi
          echo "SONAR_CI_TOKEN=$SONAR_CI_TOKEN" >> $GITHUB_ENV

      - name: Run SonarQube scan
        env:
          SONAR_HOST_URL: http://localhost:9000
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd RestaurantBookSystem
          TOKEN="${SONAR_CI_TOKEN:-$SONAR_TOKEN}"
          mvn -B -DskipTests verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=restaurant-backend \
            -Dsonar.projectName="Restaurant Backend" \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login="$TOKEN"

      - name: Wait for analysis and export results
        env:
          SONAR_HOST_URL: http://localhost:9000
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Export issues
          curl -s -u admin:admin "$SONAR_HOST_URL/api/issues/search?componentKeys=restaurant-backend" > sonar-issues.json
          # Export measures
          curl -s -u admin:admin "$SONAR_HOST_URL/api/measures/component?component=restaurant-backend&metricKeys=code_smells,bugs,vulnerabilities,coverage" > sonar-measures.json
          # Export project info
          curl -s -u admin:admin "$SONAR_HOST_URL/api/projects/search?projects=restaurant-backend" > sonar-project.json
          # Export summary (markdown)
          echo "# SonarQube Summary" > sonar-summary.md
          jq '.measures[] | "\(.metric): \(.value)"' sonar-measures.json >> sonar-summary.md

      - name: Display SonarQube results
        run: |
          echo " SONARQUBE SCAN RESULTS"
          echo "========================"
          
          if [ -f sonar-issues.json ]; then
            issues=$(jq '.issues | length' sonar-issues.json || echo 0)
            echo "Total issues: $issues"
            
            if [ "$issues" -gt 0 ]; then
              echo " ISSUES BY SEVERITY:"
              jq -r '.issues[].severity' sonar-issues.json | sort | uniq -c
              
              echo ""
              echo " TOP ISSUES:"
              jq -r '
                .issues[:20][] |
                "\(.severity) - \(.component)\n\(.message)\n"
              ' sonar-issues.json
            else
              echo " No issues found"
            fi
          else
            echo "sonar-issues.json not found"
          fi

      - name: Upload Sonar results
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report
          path: |
            sonar-issues.json
            sonar-measures.json
            sonar-project.json
            sonar-summary.md
            sonar-summary.html

      - name: Fail if issues found
        run: |
          if [ -f sonar-issues.json ]; then
            issues=$(jq '.issues | length' sonar-issues.json || echo 0)
            if [ "$issues" -gt 0 ]; then
              echo " Found $issues SonarQube issues - failing workflow"
              exit 1
            else
              echo " No SonarQube issues found"
            fi
          else
            echo " sonar-issues.json not found - scan failed"
            exit 1
          fi