name: ZAP Full Scan (Dockerized app)

on:
  workflow_call:
    secrets:
      SECRET_JWT:
        required: true
      SECRET_KEY_AES:
        required: true
      MAIL_USERNAME:
        required: true
      MAIL_PASSWORD:
        required: true
      OAUTH_GITHUB_CLIENT_ID:
        required: true
      OAUTH_GITHUB_CLIENT_SECRET:
        required: true

jobs:
  zap-full-scan:
    runs-on: ubuntu-latest
    env:
      BACKEND_URL: http://backend:8080
      FRONTEND_URL: http://frontend:80

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://restaurant_database:5432/reservsystem" >> .env
          echo "SPRING_DATASOURCE_USERNAME=usersystem" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=passreserv" >> .env
          echo "SECRET_JWT=${{ secrets.SECRET_JWT }}" >> .env
          echo "SECRET_KEY_AES=${{ secrets.SECRET_KEY_AES }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}" >> .env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: |
          docker compose -f docker-compose.yml up -d --build

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            # Δοκιμάζουμε πολλαπλά endpoints για να βρούμε κάποιο που λειτουργεί
            if curl -s -f http://localhost:8080 >/dev/null 2>&1 || \
               curl -s -f http://localhost:8080/actuator/health >/dev/null 2>&1 || \
               curl -s -f http://localhost:8080/api/auth/login -X OPTIONS >/dev/null 2>&1 || \
               curl -s -f http://localhost:8080/api/reservation/tables -X OPTIONS >/dev/null 2>&1; then
              echo "Backend is ready!"
              exit 0
            fi
            sleep 2
            echo "Waiting for backend... ($i/30)"
          done
          echo "Backend did not start properly."
          docker compose logs backend --tail=50
          exit 1

      - name: Create test user for ZAP scanning
        run: |
          echo "Creating test user for ZAP scanning..."
          docker exec -i restaurant_database psql -U usersystem -d reservsystem << EOF
          INSERT INTO users (username, email, password, role, enabled)
          VALUES ('zapuser', 'zap@example.com', '\$2a\$10\$N9qo8uLOickgx2ZMRZoMye3s3e6T7eQ6Y5q6U6U6U6U6U6U6U6U6U6', 'USER', true)
          ON CONFLICT (email) DO NOTHING;
          EOF

      - name: Find Docker network name
        run: |
          # Απλούστερος τρόπος να βρούμε το network
          NETWORK_NAME=$(docker network ls --filter "name=restaurant" --format "{{.Name}}" | head -1)
          if [ -z "$NETWORK_NAME" ]; then
            NETWORK_NAME="restaurant-booking-system_default"  # Fallback name
          fi
          echo "NETWORK_NAME=$NETWORK_NAME" >> $GITHUB_ENV
          echo "Using network: $NETWORK_NAME"

      - name: Run ZAP baseline scan
        continue-on-error: true
        run: |
          # Δημιουργούμε απλό gen.conf
          cat > gen.conf << 'EOF'
          # ZAP Baseline Scan configuration
          rules:
          EOF
          
          echo "Starting ZAP scan on network: ${{ env.NETWORK_NAME }}"
          docker run --rm \
            --network ${{ env.NETWORK_NAME }} \
            -v $(pwd):/zap/wrk \
            -t zaproxy/zap-stable \
            zap-baseline.py \
            -t http://backend:8080 \
            -g gen.conf \
            -I \
            -T 3 \
            -d

      - name: Check if ZAP reports were generated
        run: |
          echo "Checking for ZAP reports..."
          if [ -f zap-report.html ]; then
            echo "✅ ZAP HTML report generated"
            # Εμφανίζουμε brief summary
            grep -o '<title>.*</title>' zap-report.html || true
          else
            echo "⚠️ No ZAP HTML report found"
          fi
          
          # Fallback: αν δεν δουλέψει το ZAP, τουλάχιστον ελέγχουμε αν το backend λειτουργεί
          echo "Testing backend connectivity..."
          if curl -s http://localhost:8080 >/dev/null; then
            echo "✅ Backend is accessible at http://localhost:8080"
          fi

      - name: Upload ZAP artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: |
            zap-report.html
            zap-report.json
            gen.conf
          if-no-files-found: ignore

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans