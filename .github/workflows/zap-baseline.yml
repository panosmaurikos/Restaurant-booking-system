name: ZAP Full Scan (Dockerized app)

on:
  workflow_call:
    secrets:
      SECRET_JWT:
        required: true
      SECRET_KEY_AES:
        required: true
      MAIL_USERNAME:
        required: true
      MAIL_PASSWORD:
        required: true
      OAUTH_GITHUB_CLIENT_ID:
        required: true
      OAUTH_GITHUB_CLIENT_SECRET:
        required: true

jobs:
  zap-full-scan:
    runs-on: ubuntu-latest
    env:
      BACKEND_URL: http://backend:8080
      ZAP_AUTH_HEADER: "Authorization"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://restaurant_database:5432/reservsystem" >> .env
          echo "SPRING_DATASOURCE_USERNAME=usersystem" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=passreserv" >> .env
          echo "SECRET_JWT=${{ secrets.SECRET_JWT }}" >> .env
          echo "SECRET_KEY_AES=${{ secrets.SECRET_KEY_AES }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}" >> .env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: docker compose -f docker-compose.yml up -d --build

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            if docker compose exec -T backend curl -s -f http://localhost:8080/api/reservation/tables >/dev/null; then
              echo "Backend is ready!"
              break
            fi
            sleep 5
            echo "Waiting for backend... ($i/30)"
          done
          if [ $i -eq 30 ]; then
            echo "Backend did not start properly."
            docker compose logs backend
            exit 1
          fi

      - name: Create test user for ZAP scanning
        run: |
          echo "Creating test user for ZAP scanning..."
          docker compose exec -T restaurant_database psql -U usersystem -d reservsystem << EOF
          INSERT INTO users (username, email, password, role, enabled)
          VALUES ('zapuser', 'zap@example.com', '\$2a\$10\$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy', 'USER', true)
          ON CONFLICT (email) DO NOTHING;
          EOF

      - name: Login to get auth token
        id: login
        run: |
          echo "Logging in to get JWT token..."
          # Use plain password; app hashes it. Adjust if your app expects hashed input.
          RESPONSE=$(docker compose exec -T backend curl -s -X POST http://localhost:8080/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username": "zapuser", "password": "password"}')
          echo "Login response: $RESPONSE"
          TOKEN=$(echo "$RESPONSE" | jq -r '.token // empty')
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Failed to get token. Using fallback (unauthenticated scan)."
            echo "ZAP_AUTH_HEADER_VALUE=dummy" >> $GITHUB_ENV
          else
            echo "ZAP_AUTH_HEADER_VALUE=Bearer $TOKEN" >> $GITHUB_ENV
            echo "Got token: ${TOKEN:0:20}..."
          fi

      - name: Get OpenAPI spec (if available)
        run: |
          echo "Fetching OpenAPI spec..."
          docker compose exec -T backend curl -s http://localhost:8080/v3/api-docs > openapi.json || echo '{}' > openapi.json
          if [ -s openapi.json ] && jq empty openapi.json 2>/dev/null; then
            echo "✅ OpenAPI spec fetched ($(wc -c < openapi.json) bytes)"
          else
            echo "⚠️ No OpenAPI spec; fallback to baseline scan"
          fi

      - name: Run ZAP API scan (preferred for REST APIs)
        continue-on-error: true
        run: |
          # Get compose network (e.g., restaurant-booking-system_default)
          NETWORK_NAME=$(docker compose network ls --format "table {{.Name}}" | grep "_default" | awk '{print $1}')
          if [ -z "$NETWORK_NAME" ]; then
            NETWORK_NAME=$(docker network ls --filter label=com.docker.compose.project=$(basename $PWD) --format "{{.Name}}")
          fi
          echo "Using network: $NETWORK_NAME"
          
          # Create gen.conf (default rules to WARN)
          cat > gen.conf << 'EOF'
          # ZAP API Scan configuration - all rules WARN
          EOF
          
          # Run API scan with spec + auth
          docker run --rm \
            --network $NETWORK_NAME \
            -e ZAP_AUTH_HEADER \
            -e ZAP_AUTH_HEADER_VALUE \
            -v $(pwd):/zap/wrk:rw \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-api-scan.py \
            -t http://backend:8080 \
            -f openapi \
            -s /zap/wrk/openapi.json \
            -g /zap/wrk/gen.conf \
            -r /zap/wrk/zap-report.html \
            -J /zap/wrk/zap-report.json \
            -I \
            -T 15 \
            -d || true
          
          echo "ZAP API scan completed (exit code: $?)"

      - name: Fallback to Baseline scan (if API scan fails or no spec)
        if: failure()
        continue-on-error: true
        run: |
          # Only run if openapi.json is missing or empty
          if [ ! -s openapi.json ]; then
            NETWORK_NAME=$(docker compose network ls --format "table {{.Name}}" | grep "_default" | awk '{print $1}')
            if [ -z "$NETWORK_NAME" ]; then
              NETWORK_NAME=$(docker network ls --filter label=com.docker.compose.project=$(basename $PWD) --format "{{.Name}}")
            fi

            docker run --rm \
              --network $NETWORK_NAME \
              -e ZAP_AUTH_HEADER \
              -e ZAP_AUTH_HEADER_VALUE \
              -v $(pwd):/zap/wrk:rw \
              -t ghcr.io/zaproxy/zaproxy:stable \
              zap-baseline.py \
              -t http://backend:8080/api/reservation/tables \
              -g /zap/wrk/gen.conf \
              -r /zap/wrk/zap-report-baseline.html \
              -J /zap/wrk/zap-report-baseline.json \
              -I \
              -T 15 \
              -d || true

            echo "ZAP Baseline fallback completed (exit code: $?)"
          else
            echo "Skipping baseline scan; openapi.json exists and is not empty."
          fi

      - name: Check and summarize reports
        run: |
          echo "=== ZAP Scan Summary ==="
          ls -la zap-report.* || true
          if [ -f zap-report.html ]; then
            echo "✅ API Scan HTML: $(du -h zap-report.html | cut -f1)"
            # Extract risks
            grep -E "(High|Medium|Low)" zap-report.html | head -10 || echo "No risks found"
          fi
          if [ -f zap-report.json ]; then
            echo "✅ API Scan JSON: $(du -h zap-report.json | cut -f1)"
            jq '.site[]? | select(.alerts != null) | .alerts[]? | {name: .name, risk: .riskdesc}' zap-report.json 2>/dev/null | head -10 || echo "No alerts"
          fi
          if [ -f zap-report-baseline.html ]; then
            echo "✅ Baseline HTML: $(du -h zap-report-baseline.html | cut -f1)"
          fi
          if [ ! -f zap-report.html ] && [ ! -f zap-report-baseline.html ]; then
            echo "⚠️ No reports - capturing debug logs"
            docker ps -a --filter ancestor=ghcr.io/zaproxy/zaproxy:stable --format "{{.ID}}" | xargs -r docker logs > zap-debug.log 2>&1 || true
            echo "ZAP debug log size: $(du -h zap-debug.log | cut -f1)"
          fi

      - name: Upload ZAP artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: |
            zap-report*.html
            zap-report*.json
            openapi.json
            gen.conf
            zap-debug.log
          if-no-files-found: ignore

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans