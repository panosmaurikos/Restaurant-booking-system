name: ZAP Full Scan (Dockerized app)

on:
  workflow_call:
    secrets:
      SECRET_JWT:
        required: true
      SECRET_KEY_AES:
        required: true
      MAIL_USERNAME:
        required: true
      MAIL_PASSWORD:
        required: true
      OAUTH_GITHUB_CLIENT_ID:
        required: true
      OAUTH_GITHUB_CLIENT_SECRET:
        required: true

jobs:
  zap-full-scan:
    runs-on: ubuntu-latest
    env:
      BACKEND_URL: http://backend:8080
      ZAP_AUTH_HEADER: "Authorization"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://restaurant_database:5432/reservsystem" >> .env
          echo "SPRING_DATASOURCE_USERNAME=usersystem" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=passreserv" >> .env
          echo "SECRET_JWT=${{ secrets.SECRET_JWT }}" >> .env
          echo "SECRET_KEY_AES=${{ secrets.SECRET_KEY_AES }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}" >> .env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: docker compose -f docker-compose.yml up -d --build

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8080 >/dev/null; then
              echo "Application is ready!"
              exit 0
            fi
            sleep 2
            echo "Waiting... ($i/30)"
          done
          echo "Application did not start properly, but continuing anyway..."

      - name: Login to get auth token
        id: login
        run: |
          echo "Logging in to get JWT token using default admin credentials..."
          
          RESPONSE=$(curl -s -X POST http://localhost:8080/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username": "admin@reservation.gr", "password": "admin"}')
          echo "Login response: $RESPONSE"
          
          if echo "$RESPONSE" | jq empty 2>/dev/null; then
            TOKEN=$(echo "$RESPONSE" | jq -r '.token // empty')
            if [ -n "$TOKEN" ] && [ "$TOKEN" != "null" ]; then
              echo "ZAP_AUTH_HEADER_VALUE=Bearer $TOKEN" >> $GITHUB_ENV
              echo "Got token: ${TOKEN:0:20}..."
            else
              echo "Failed to get token from JSON response"
              echo "ZAP_AUTH_HEADER_VALUE=dummy" >> $GITHUB_ENV
            fi
          else
            echo "Response is not JSON - authentication failed or different format"
            echo "ZAP_AUTH_HEADER_VALUE=dummy" >> $GITHUB_ENV
          fi

      - name: Get OpenAPI spec (if available)
        run: |
          echo "Fetching OpenAPI spec..."
          curl -s http://localhost:8080/v3/api-docs > openapi.json || echo '{}' > openapi.json
          if [ -s openapi.json ] && jq empty openapi.json 2>/dev/null; then
            echo "OpenAPI spec fetched ($(wc -c < openapi.json) bytes)"
          else
            echo "No OpenAPI spec; fallback to baseline scan"
          fi

      - name: Run ZAP API scan
        continue-on-error: true
        run: |
          # Get compose network
          NETWORK_NAME=$(docker network ls --filter label=com.docker.compose.project -q | head -1 | xargs docker network inspect --format '{{.Name}}')
          if [ -z "$NETWORK_NAME" ]; then
            NETWORK_NAME="restaurant-booking-system_default"
          fi
          echo "Using network: $NETWORK_NAME"
          
          # Create gen.conf
          cat > gen.conf << 'EOF'
          # ZAP API Scan configuration
          EOF
          
          # Run API scan
          OPENAPI_SIZE=$(stat -c%s openapi.json 2>/dev/null || echo 0)
          echo "openapi.json size: $OPENAPI_SIZE"
          if [ "$OPENAPI_SIZE" -lt 1000 ]; then
            echo "OpenAPI spec not usable or too small - running baseline scan against backend"
            docker run --rm \
              --network $NETWORK_NAME \
              -e ZAP_AUTH_HEADER="Authorization" \
              -e ZAP_AUTH_HEADER_VALUE="$ZAP_AUTH_HEADER_VALUE" \
              -v $(pwd):/zap/wrk:rw \
              -t ghcr.io/zaproxy/zaproxy:stable \
              zap-baseline.py \
              -t http://backend:8080 \
              -r /zap/wrk/zap-report.html \
              -I || true
          else
            echo "OpenAPI spec found and appears valid - running API scan"
            docker run --rm \
              --network $NETWORK_NAME \
              -e ZAP_AUTH_HEADER="Authorization" \
              -e ZAP_AUTH_HEADER_VALUE="$ZAP_AUTH_HEADER_VALUE" \
              -v $(pwd):/zap/wrk:rw \
              -t ghcr.io/zaproxy/zaproxy:stable \
              zap-api-scan.py \
              -t http://backend:8080 \
              -f openapi \
              -s /zap/wrk/openapi.json \
              -g /zap/wrk/gen.conf \
              -r /zap/wrk/zap-report.html \
              -J /zap/wrk/zap-report.json \
              -I \
              -T 10 \
              -d || true
          fi
          
          echo "ZAP API scan completed"

      - name: Check and summarize reports
        run: |
          echo "=== ZAP Scan Summary ==="
          if [ -f zap-report.html ]; then
            echo " ZAP HTML report generated"
            echo "Report size: $(du -h zap-report.html | cut -f1)"
          else
            echo " No ZAP report found"
          fi

      - name: Upload ZAP artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: |
            zap-report.html
            zap-report.json
            openapi.json
            gen.conf
          if-no-files-found: ignore

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans