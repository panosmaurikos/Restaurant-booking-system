name: ZAP Full Scan (Dockerized app)

on:
  workflow_call:
    secrets:
      SECRET_JWT:
        required: true
      SECRET_KEY_AES:
        required: true
      MAIL_USERNAME:
        required: true
      MAIL_PASSWORD:
        required: true
      OAUTH_GITHUB_CLIENT_ID:
        required: true
      OAUTH_GITHUB_CLIENT_SECRET:
        required: true

jobs:
  zap-full-scan:
    runs-on: ubuntu-latest
    env:
      BACKEND_URL: http://localhost:8080  # Χρησιμοποιούμε localhost αντί για service name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://restaurant_database:5432/reservsystem" >> .env
          echo "SPRING_DATASOURCE_USERNAME=usersystem" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=passreserv" >> .env
          echo "SECRET_JWT=${{ secrets.SECRET_JWT }}" >> .env
          echo "SECRET_KEY_AES=${{ secrets.SECRET_KEY_AES }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}" >> .env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: |
          docker compose -f docker-compose.yml up -d --build

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/api/reservation/tables >/dev/null 2>&1; then
              echo "Backend is ready!"
              exit 0
            fi
            sleep 5
            echo "Waiting for backend... ($i/30)"
          done
          echo "Backend did not start properly."
          docker compose logs backend
          exit 1

      - name: Create test user for ZAP scanning
        run: |
          echo "Creating test user for ZAP scanning..."
          docker exec -i restaurant_database psql -U usersystem -d reservsystem << EOF
          INSERT INTO users (username, email, password, role, enabled)
          VALUES ('zapuser', 'zap@example.com', '\$2a\$10\$N9qo8uLOickgx2ZMRZoMye3s3e6T7eQ6Y5q6U6U6U6U6U6U6U6U6U6', 'USER', true)
          ON CONFLICT (email) DO NOTHING;
          EOF

      - name: Run ZAP scan using host network
        run: |
          # Χρησιμοποιούμε --network host και localhost αντί για Docker networking
          docker run --rm \
            --network host \  # Χρησιμοποιούμε host network
            -v $(pwd):/zap/wrk \
            -t zaproxy/zap-stable \
            zap-baseline.py \
            -t http://localhost:8080 \  # Χρησιμοποιούμε localhost
            -I  # Μην αποτυγχάνεις για warnings

      - name: Check if ZAP completed successfully
        run: |
          # Έξοδος 0 = success, 2 = warnings, 3 = error
          # Αγνοούμε το exit code 2 (warnings)
          if [ $? -eq 2 ]; then
            echo "⚠️ ZAP completed with warnings - this is expected"
            exit 0  # Θεωρούμε warnings ως success
          elif [ $? -eq 0 ]; then
            echo "✅ ZAP completed successfully"
          else
            echo "❌ ZAP failed with error"
            exit 1
          fi

      - name: Upload ZAP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: |
            zap-report.html
            zap-report.json
            zap-report.xml
          if-no-files-found: ignore

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans