name: ZAP Full Scan (Dockerized app)

on:
  workflow_call:
    secrets:
      SECRET_JWT:
        required: true
      SECRET_KEY_AES:
        required: true
      MAIL_USERNAME:
        required: true
      MAIL_PASSWORD:
        required: true
      OAUTH_GITHUB_CLIENT_ID:
        required: true
      OAUTH_GITHUB_CLIENT_SECRET:
        required: true

jobs:
  zap-full-scan:
    runs-on: ubuntu-latest
    env:
      BACKEND_URL: http://backend:8080
      FRONTEND_URL: http://frontend:80

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://restaurant_database:5432/reservsystem" >> .env
          echo "SPRING_DATASOURCE_USERNAME=usersystem" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=passreserv" >> .env
          echo "SECRET_JWT=${{ secrets.SECRET_JWT }}" >> .env
          echo "SECRET_KEY_AES=${{ secrets.SECRET_KEY_AES }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}" >> .env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: |
          docker compose -f docker-compose.yml up -d --build

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            if docker compose exec backend curl -s -f http://localhost:8080/api/reservation/tables >/dev/null 2>&1; then
              echo "Backend is ready!"
              exit 0
            fi
            sleep 5
            echo "Waiting for backend... ($i/30)"
          done
          echo "Backend did not start properly."
          docker compose logs backend
          exit 1

      - name: Create test user for ZAP scanning
        run: |
          echo "Creating test user for ZAP scanning..."
          docker exec -i restaurant_database psql -U usersystem -d reservsystem << EOF
          INSERT INTO users (username, email, password, role, enabled)
          VALUES ('zapuser', 'zap@example.com', '\$2a\$10\$N9qo8uLOickgx2ZMRZoMye3s3e6T7eQ6Y5q6U6U6U6U6U6U6U6U6U6', 'USER', true)
          ON CONFLICT (email) DO NOTHING;
          EOF

      - name: Find Docker network name
        run: |
          # Αυτόματα βρίσκουμε το default network του docker-compose
          NETWORK_NAME=$(docker compose ps --services | head -1 | xargs docker compose network ls --filter "label=com.docker.compose.project" --format "{{.Name}}" | head -1)
          if [ -z "$NETWORK_NAME" ]; then
            NETWORK_NAME="zap_default"  # Fallback αν δεν βρεθεί
          fi
          echo "NETWORK_NAME=$NETWORK_NAME" >> $GITHUB_ENV
          echo "Using network: $NETWORK_NAME"

      - name: Run ZAP baseline scan
        continue-on-error: true  # Μην αποτυγχάνει το workflow σε exit 3
        run: |
          # Δημιουργούμε απλό gen.conf (rules file) - άδειο για default rules
          cat > gen.conf << 'EOF'
          # ZAP Baseline Scan configuration - no custom rules
          EOF
          
          # Εκτελούμε το ZAP baseline scan με reports και debug
          docker run --rm \
            --network ${{ env.NETWORK_NAME }} \
            -v $(pwd):/zap/wrk \
            -t zaproxy/zap-stable \
            zap-baseline.py \
            -t http://backend:8080 \
            -g gen.conf \
            -r /zap/wrk/zap-report.html \
            -J /zap/wrk/zap-report.json \
            -I \  # Ignore warnings (exit 2 -> 0)
            -T 5 \  # 5 min timeout
            -d  # Debug mode για troubleshooting
          ZAP_EXIT_CODE=$?
          echo "ZAP exit code: $ZAP_EXIT_CODE"
          
          # Αν exit 3, εμφανίζουμε extra logs
          if [ $ZAP_EXIT_CODE -eq 3 ]; then
            echo "⚠️ ZAP failed with exit code 3 (other failure). Check logs above."
          fi

      - name: Check if ZAP reports were generated
        run: |
          echo "Checking for ZAP reports..."
          if [ -f zap-report.html ]; then
            echo "✅ ZAP HTML report generated ($(du -h zap-report.html | cut -f1))"
            # Εμφανίζουμε summary από HTML (αν υπάρχει)
            grep -i "alert\|vuln\|risk" zap-report.html | head -10 || true
          fi
          if [ -f zap-report.json ]; then
            echo "✅ ZAP JSON report generated ($(du -h zap-report.json | cut -f1))"
            # Εμφανίζουμε summary από JSON
            jq '.site | length' zap-report.json 2>/dev/null || echo "No sites scanned"
          fi
          
          # Αν δεν βρέθηκαν reports, upload logs
          if [ ! -f zap-report.html ] && [ ! -f zap-report.json ]; then
            echo "⚠️ No ZAP reports found - uploading ZAP logs as fallback"
            docker logs $(docker ps -q --filter "ancestor=zaproxy/zap-stable") > zap-debug.log 2>&1 || true
          fi

      - name: Upload ZAP artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: |
            zap-report.html
            zap-report.json
            gen.conf
            zap-debug.log  # Fallback log file
          if-no-files-found: ignore

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans