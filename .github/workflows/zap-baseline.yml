name: ZAP Full Scan (Dockerized app + Form Auth)

on:
  workflow_call:
    secrets:
      SECRET_JWT:
        required: true
      SECRET_KEY_AES:
        required: true
      MAIL_USERNAME:
        required: true
      MAIL_PASSWORD:
        required: true
      OAUTH_GITHUB_CLIENT_ID:
        required: true
      OAUTH_GITHUB_CLIENT_SECRET:
        required: true

jobs:
  zap-full-scan:
    runs-on: ubuntu-latest
    env:
      BACKEND_URL: http://localhost:8080
      FRONTEND_URL: http://localhost:8081
      LOGIN_PATH: /api/auth/login

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://restaurant_database:5432/reservsystem" >> .env
          echo "SPRING_DATASOURCE_USERNAME=usersystem" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=passreserv" >> .env
          echo "SECRET_JWT=${{ secrets.SECRET_JWT }}" >> .env
          echo "SECRET_KEY_AES=${{ secrets.SECRET_KEY_AES }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}" >> .env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: |
          docker compose -f docker-compose.yml up -d --build

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            if curl -sS --max-time 5 "${{ env.BACKEND_URL }}/api/reservation/tables" >/dev/null 2>&1; then
              echo "Backend is ready!"
              exit 0
            fi
            sleep 5
            echo "Waiting for backend... ($i/30)"
          done
          echo "Backend did not start properly."
          docker compose logs backend
          exit 1

      - name: Create test user for ZAP scanning
        run: |
          # Create a test user directly in the database
          echo "Creating test user for ZAP scanning..."
          docker exec -i restaurant_database psql -U usersystem -d reservsystem << EOF
          INSERT INTO users (username, email, password, role, enabled)
          VALUES ('zapuser', 'zap@example.com', '\$2a\$10\$N9qo8uLOickgx2ZMRZoMye3s3e6T7eQ6Y5q6U6U6U6U6U6U6U6U6U6', 'USER', true)
          ON CONFLICT (email) DO NOTHING;
          EOF

      - name: ZAP Full Scan (authenticated)
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: '${{ env.BACKEND_URL }}'
          docker_name: 'owasp/zap2docker-stable'
          allow_issue_writing: false
          artifact_name: zap_full_scan
          cmd_options: >
            -I
            -j
            --auth-form-url="${{ env.BACKEND_URL }}${{ env.LOGIN_PATH }}"
            --auth-form-user="zap@example.com"
            --auth-form-pass="password123"
            --auth-form-username-field="username"
            --auth-form-password-field="password"
            -r zap-report.html
            -J zap-report.json
            -x zap-report.xml

      - name: Check ZAP results
        run: |
          if [ -f zap-report.json ]; then
            echo "=== ZAP Scan Results Summary ==="
            HIGH_COUNT=$(jq '.site[]?.alerts[]? | select(.risk == "High") | .name' zap-report.json | wc -l)
            MEDIUM_COUNT=$(jq '.site[]?.alerts[]? | select(.risk == "Medium") | .name' zap-report.json | wc -l)
            
            echo "High risk vulnerabilities: $HIGH_COUNT"
            echo "Medium risk vulnerabilities: $MEDIUM_COUNT"
            
            if [ "$HIGH_COUNT" -gt 0 ]; then
              echo "❌ High risk vulnerabilities found:"
              jq '.site[]?.alerts[]? | select(.risk == "High") | .name' zap-report.json | uniq
              exit 1
            else
              echo "✅ No high risk vulnerabilities found"
            fi
          else
            echo "❌ ZAP report not found"
            exit 1
          fi

      - name: Upload ZAP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: |
            zap-report.html
            zap-report.json
            zap-report.xml

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans