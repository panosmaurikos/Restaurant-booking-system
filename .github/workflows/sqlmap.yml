name: SQL Injection Scan

on:
  workflow_call:
    secrets:
      SECRET_JWT:
        required: true
      SECRET_KEY_AES:
        required: true
      MAIL_USERNAME:
        required: true
      MAIL_PASSWORD:
        required: true
      OAUTH_GITHUB_CLIENT_ID:
        required: true
      OAUTH_GITHUB_CLIENT_SECRET:
        required: true

jobs:
  sqlmap-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://restaurant_database:5432/reservsystem" >> .env
          echo "SPRING_DATASOURCE_USERNAME=usersystem" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=passreserv" >> .env
          echo "SECRET_JWT=${{ secrets.SECRET_JWT }}" >> .env
          echo "SECRET_KEY_AES=${{ secrets.SECRET_KEY_AES }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}" >> .env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}" >> .env

      - name: Start application
        run: docker compose -f docker-compose.yml up -d --build

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/api/reservation/tables >/dev/null; then
              echo "Application is ready!"
              exit 0
            fi
            sleep 2
            echo "Waiting... ($i/30)"
          done
          echo "Application did not start properly, but continuing anyway..."

      - name: Create directory for SQLMap reports
        run: mkdir -p sqlmap-reports

      - name: Prepare SQLMap target list
        run: |
          cat > sqlmap-reports/targets.txt <<'TARGS'
          http://localhost:8080/api/reservation/returnable/1?id=1
          http://localhost:8080/api/reservation/completed/1?id=1
          http://localhost:8080/api/reservation/cancel/1?id=1
          http://localhost:8080/api/reservation/verify/1?id=1
          http://localhost:8080/api/reservation/send-verification-email/1?id=1
          http://localhost:8080/api/user/returnable/1?id=1
          http://localhost:8080/api/auth/register --method=POST --data="username=test&password=test"
          http://localhost:8080/api/auth/login --method=POST --data="username=test&password=test"
          http://localhost:8080/api/reservation/filters --method=POST --data="date=2025-01-01"
          http://localhost:8080/api/reservation/availabletables --method=POST --data="date=2025-01-01"
          TARGS

      - name: Run SQLMap scan (non-interactive)
        run: |
          set -euo pipefail
          echo "Starting SQLMap scan..."
          # Χρήση --answers για αυτόματες απαντήσεις σε interactive prompts
          docker run --rm \
            --network host \
            -v "$(pwd)/sqlmap-reports":/root/.sqlmap \
            panosmavrikos/sqlmap:latest \
            -m /root/.sqlmap/targets.txt \
            --batch \
            --level=1 \
            --risk=1 \
            --skip="User-Agent,Referer,Host" \
            --random-agent \
            --dbms=postgresql \
            --flush-session \
            --output-dir=/root/.sqlmap/output \
            --timeout=30 \
            --retries=2 \
            --answers="continue=Y,quit=N,reduce=Y,skip=N" \
          > sqlmap-reports/scan.stdout.log 2> sqlmap-reports/scan.stderr.log || true

      - name: Analyze scan results
        run: |
          echo "=== SQL Injection Scan Analysis ==="
          
          # Check for confirmed vulnerabilities
          if grep -q "confirmed" sqlmap-reports/scan.stdout.log || grep -q "highly injectable" sqlmap-reports/scan.stdout.log; then
            echo "❌ CRITICAL: Confirmed SQL Injection vulnerabilities found!"
            echo ""
            echo "Vulnerable parameters found:"
            grep -E "(parameter.*confirmed|parameter.*highly injectable)" sqlmap-reports/scan.stdout.log | sort | uniq
            exit 1
          elif grep -q "injectable" sqlmap-reports/scan.stdout.log; then
            echo "⚠️  Possible SQL Injection vulnerabilities found (may be false positives)"
            echo ""
            echo "Possible vulnerable parameters:"
            grep -E "parameter.*appears to be.*injectable" sqlmap-reports/scan.stdout.log | sort | uniq
            echo ""
            echo "Note: These may be false positives. Please manually verify the code."
          else
            echo "✅ No SQL Injection vulnerabilities detected"
          fi

      - name: Generate security report
        if: always()
        run: |
          echo "📊 SQLMap Security Report" > sqlmap-reports/security-report.md
          echo "=========================" >> sqlmap-reports/security-report.md
          echo "" >> sqlmap-reports/security-report.md
          echo "Scan date: $(date)" >> sqlmap-reports/security-report.md
          echo "" >> sqlmap-reports/security-report.md
          
          if grep -q "injectable" sqlmap-reports/scan.stdout.log; then
            echo "## ⚠️ POSSIBLE VULNERABILITIES FOUND" >> sqlmap-reports/security-report.md
            echo "" >> sqlmap-reports/security-report.md
            echo "**Note:** These may be false positives. Manual verification required." >> sqlmap-reports/security-report.md
            echo "" >> sqlmap-reports/security-report.md
            grep -E "parameter.*appears to be.*injectable" sqlmap-reports/scan.stdout.log | sort | uniq >> sqlmap-reports/security-report.md
          else
            echo "## ✅ NO VULNERABILITIES DETECTED" >> sqlmap-reports/security-report.md
          fi
          
          echo "" >> sqlmap-reports/security-report.md
          echo "## Scan Details" >> sqlmap-reports/security-report.md
          echo "Targets tested: $(wc -l < sqlmap-reports/targets.txt)" >> sqlmap-reports/security-report.md
          echo "Scan configuration: Level 1, Risk 1, Headers skipped" >> sqlmap-reports/security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: sqlmap-security-report
          path: sqlmap-reports/security-report.md
          if-no-files-found: warn

      - name: Upload full SQLMap reports
        uses: actions/upload-artifact@v4
        with:
          name: sqlmap-full-reports
          path: sqlmap-reports/
          if-no-files-found: warn

      - name: Stop application
        if: always()
        run: docker compose -f docker-compose.yml down