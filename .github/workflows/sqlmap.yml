name: SQL Injection Scan

on:
  workflow_call:
    secrets:
      SECRET_JWT:
        required: true
      SECRET_KEY_AES:
        required: true
      MAIL_USERNAME:
        required: true
      MAIL_PASSWORD:
        required: true
      OAUTH_GITHUB_CLIENT_ID:
        required: true
      OAUTH_GITHUB_CLIENT_SECRET:
        required: true

jobs:
  sqlmap-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
          echo "SECRET_JWT=${{ secrets.SECRET_JWT }}" >> .env
          echo "SECRET_KEY_AES=${{ secrets.SECRET_KEY_AES }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}" >> .env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}" >> .env

      - name: Start application
        run: docker compose -f docker-compose.yml up -d --build

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          sleep 30
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8080 || echo "Backend may not be fully ready"

      - name: Create directory for SQLMap reports
        run: mkdir -p sqlmap-reports

      - name: Prepare SQLMap target list
        run: |
          cat > sqlmap-reports/targets.txt <<'TARGS'
          http://localhost:8080/api/auth/register --method=POST --data="username=test&password=test"
          http://localhost:8080/api/auth/login --method=POST --data="username=test&password=test"
          http://localhost:8080/api/auth/verify --method=POST --data="code=123456"
          http://localhost:8080/api/auth/logout
          http://localhost:8080/api/auth/github/register
          http://localhost:8080/api/auth/github/callback
          http://localhost:8080/api/reservation/filters --method=POST --data="date=2025-01-01"
          http://localhost:8080/api/reservation/savereservation --method=POST --data="table=1&user=1"
          http://localhost:8080/api/reservation/tables
          http://localhost:8080/api/reservation/returnable/1?id=1
          http://localhost:8080/api/reservation/completed/1?id=1
          http://localhost:8080/api/reservation/checkin --method=POST --data="reservationId=1"
          http://localhost:8080/api/reservation/availabletables --method=POST --data="date=2025-01-01"
          http://localhost:8080/api/reservation/cancel/1?id=1
          http://localhost:8080/api/reservation/verify/1?id=1
          http://localhost:8080/api/reservation/update/1 --method=PUT --data="table=2"
          http://localhost:8080/api/reservation/send-verification-email/1?id=1
          http://localhost:8080/api/user/all
          http://localhost:8080/api/user/update/1 --method=PUT --data="email=test@test.com"
          http://localhost:8080/api/user/returnable/1?id=1
          TARGS

      - name: Run SQLMap on target endpoints
        run: |
          set -euo pipefail
          docker run --rm \
            --network host \
            -v "$(pwd)/sqlmap-reports":/root/.sqlmap \
            panosmavrikos/sqlmap:latest \
            -m /root/.sqlmap/targets.txt \
            --batch \
            --level=5 \
            --risk=3 \
            --tamper=space2comment,between,randomcase \
            --random-agent \
            --dbms=H2 \
            --proxy=http://localhost:8080 \
            --flush-session \
            --output-dir=/root/.sqlmap/output \
          > sqlmap-reports/scan.stdout.log 2> sqlmap-reports/scan.stderr.log || true

      - name: Check for vulnerabilities
        run: |
          if grep -q "injectable" sqlmap-reports/scan.stdout.log; then
            echo "Vulnerabilities found! Failing workflow."
            grep -E "appears to be.*injectable" sqlmap-reports/scan.stdout.log | grep -v "does not seem to be injectable"

            exit 1
          else
            echo "No vulnerabilities found."
          fi

      - name: Display SQLMap results
        run: |
          echo "SQLMap Scan Results (host-side):"
          ls -la sqlmap-reports || true
          echo "---- stdout (head) ----"
          head -n 200 sqlmap-reports/scan.stdout.log || echo "(no stdout log)"
          echo "---- stderr (head) ----"
          head -n 200 sqlmap-reports/scan.stderr.log || echo "(no stderr log)"
          echo "---- container output files ----"
          shopt -s nullglob
          for f in sqlmap-reports/output/* sqlmap-reports/*; do
            if [ -f "$f" ]; then
              echo "----- $f -----"
              sed -n '1,200p' "$f" || true
            fi
          done

      - name: Upload SQLMap reports
        uses: actions/upload-artifact@v4
        with:
          name: sqlmap-reports
          path: sqlmap-reports/
          if-no-files-found: warn

      - name: Stop application
        if: always()
        run: docker compose -f docker-compose.yml down